/*
 Example sketch for the PS4 Bluetooth library - developed by Kristian Lauszus
 For more information visit my blog: http://blog.tkjelectronics.dk/ or
 send me an e-mail:  kristianl@tkjelectronics.com
 

#include <PS4BT.h>
#include <usbhub.h>

// Satisfy the IDE, which needs to see the include statment in the ino too.
#ifdef dobogusinclude
#include <spi4teensy3.h>
#include <SPI.h>
#endif

USB Usb;
//USBHub Hub1(&Usb); // Some dongles have a hub inside
BTD Btd(&Usb); // You have to create the Bluetooth Dongle instance like so

/* You can create the instance of the PS4BT class in two ways 
// This will start an inquiry and then pair with the PS4 controller - you only have to do this once
// You will need to hold down the PS and Share button at the same time, the PS4 controller will then start to blink rapidly indicating that it is in pairing mode
PS4BT PS4(&Btd, PAIR);

// After that you can simply create the instance like so and then press the PS button on the device
//PS4BT PS4(&Btd);

bool printAngle, printTouch;
uint8_t oldL2Value, oldR2Value;

void setup() {
  Serial.begin(115200);
#if !defined(__MIPSEL__)
  while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection
#endif
  if (Usb.Init() == -1) {
    Serial.print(F("\r\nOSC did not start"));
    while (1); // Halt
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
}
void loop() {
  Usb.Task();

  if (PS4.connected()) {
    if (PS4.getAnalogHat(LeftHatX) > 137 || PS4.getAnalogHat(LeftHatX) < 117 || PS4.getAnalogHat(LeftHatY) > 137 || PS4.getAnalogHat(LeftHatY) < 117 || PS4.getAnalogHat(RightHatX) > 137 || PS4.getAnalogHat(RightHatX) < 117 || PS4.getAnalogHat(RightHatY) > 137 || PS4.getAnalogHat(RightHatY) < 117) {
      Serial.print(F("\r\nLeftHatX: "));
      Serial.print(PS4.getAnalogHat(LeftHatX));
      Serial.print(F("\tLeftHatY: "));
      Serial.print(PS4.getAnalogHat(LeftHatY));
      Serial.print(F("\tRightHatX: "));
      Serial.print(PS4.getAnalogHat(RightHatX));
      Serial.print(F("\tRightHatY: "));
      Serial.print(PS4.getAnalogHat(RightHatY));
    }

    if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
      Serial.print(F("\r\nL2: "));
      Serial.print(PS4.getAnalogButton(L2));
      Serial.print(F("\tR2: "));
      Serial.print(PS4.getAnalogButton(R2));
    }
    if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) // Only write value if it's different
      PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
    oldL2Value = PS4.getAnalogButton(L2);
    oldR2Value = PS4.getAnalogButton(R2);

    if (PS4.getButtonClick(PS)) {
      Serial.print(F("\r\nPS"));
      PS4.disconnect();
    }
    else {
      if (PS4.getButtonClick(TRIANGLE)) {
        Serial.print(F("\r\nTraingle"));
        PS4.setRumbleOn(RumbleLow);
      }
      if (PS4.getButtonClick(CIRCLE)) {
        Serial.print(F("\r\nCircle"));
        PS4.setRumbleOn(RumbleHigh);
      }
      if (PS4.getButtonClick(CROSS)) {
        Serial.print(F("\r\nCross"));
        PS4.setLedFlash(10, 10); // Set it to blink rapidly
      }
      if (PS4.getButtonClick(SQUARE)) {
        Serial.print(F("\r\nSquare"));
        PS4.setLedFlash(0, 0); // Turn off blinking
      }

      if (PS4.getButtonClick(UP)) {
        Serial.print(F("\r\nUp"));
        PS4.setLed(Red);
      } if (PS4.getButtonClick(RIGHT)) {
        Serial.print(F("\r\nRight"));
        PS4.setLed(Blue);
      } if (PS4.getButtonClick(DOWN)) {
        Serial.print(F("\r\nDown"));
        PS4.setLed(Yellow);
      } if (PS4.getButtonClick(LEFT)) {
        Serial.print(F("\r\nLeft"));
        PS4.setLed(Green);
      }

      if (PS4.getButtonClick(L1))
        Serial.print(F("\r\nL1"));
      if (PS4.getButtonClick(L3))
        Serial.print(F("\r\nL3"));
      if (PS4.getButtonClick(R1))
        Serial.print(F("\r\nR1"));
      if (PS4.getButtonClick(R3))
        Serial.print(F("\r\nR3"));

      if (PS4.getButtonClick(SHARE))
        Serial.print(F("\r\nShare"));
      if (PS4.getButtonClick(OPTIONS)) {
        Serial.print(F("\r\nOptions"));
        printAngle = !printAngle;
      }
      if (PS4.getButtonClick(TOUCHPAD)) {
        Serial.print(F("\r\nTouchpad"));
        printTouch = !printTouch;
      }

      if (printAngle) { // Print angle calculated using the accelerometer only
        Serial.print(F("\r\nPitch: "));
        Serial.print(PS4.getAngle(Pitch));
        Serial.print(F("\tRoll: "));
        Serial.print(PS4.getAngle(Roll));
      }

      if (printTouch) { // Print the x, y coordinates of the touchpad
        if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
          Serial.print(F("\r\n"));
        for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
          if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
            Serial.print(F("X")); Serial.print(i + 1); Serial.print(F(": "));
            Serial.print(PS4.getX(i));
            Serial.print(F("\tY")); Serial.print(i + 1); Serial.print(F(": "));
            Serial.print(PS4.getY(i));
            Serial.print(F("\t"));
          }
        }
      }
    }
  }
}*/






















/*
 Example sketch for the PS4 USB library - developed by Kristian Lauszus
 For more information visit my blog: http://blog.tkjelectronics.dk/ or
 send me an e-mail:  kristianl@tkjelectronics.com
 */

#include <PS4USB.h>

// Satisfy the IDE, which needs to see the include statment in the ino too.
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif

#include <SPI.h>      // Pour la communication via le port SPI
#include <Mirf.h>     // Pour la gestion de la communication
#include <nRF24L01.h> // Pour les définitions des registres du nRF24L01
#include <MirfHardwareSpiDriver.h> // Pour la communication SPI

#define TAILLE 4

USB Usb;
PS4USB PS4(&Usb);

bool printAngle, printTouch;
uint8_t oldL2Value, oldR2Value;

void setup() {

  Serial.begin(115200);


  // INIT Manette
  #if !defined(__MIPSEL__)
    while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection
  #endif
  if (Usb.Init() == -1) {
    Serial.print(F("\r\nOSC did not start"));
    while (1); // Halt
  }
  Serial.print(F("\r\nPS4 USB Library Started"));



  // INIT Module Radio
  Mirf.cePin = 9; // Broche CE sur D9
  Mirf.csnPin = 10; // Broche CSN sur D10
  Mirf.spi = &MirfHardwareSpi; // On veut utiliser le port SPI hardware
  Mirf.init(); // Initialise la bibliothèque

  Mirf.channel = 1; // Choix du canal de communication (128 canaux disponibles, de 0 à 127)
  Mirf.payload = TAILLE; // Taille d'un message (maximum 32 octets)
  Mirf.config(); // Sauvegarde la configuration dans le module radio

  Mirf.setTADDR((byte *) "nrf02"); // Adresse de transmission
  Mirf.setRADDR((byte *) "nrf01"); // Adresse de réception
   
  Serial.println("Go !"); 
}

// After that you can simply create the instance like so and then press the PS button on the device
//PS4BT PS4(&Btd);
int angleLacetMax = 18; // OK
int angleAiletteMax = 18; // OK
int angleAiletteMin = -18; // OK
int servoAileDroite; // OK
int servoAileGauche; // OK
int servoEmpenage; // OK
int valeurAccelerateurs; // OK
int angleTangage; // haut ou bas OK
int angleRoulis; // rotation axe x OK
int angleLacet; // rotation de l'empenage OK
int message; // OK
int valJoyestickPS4YMin = 0; // OK
int valJoyestickPS4YMax = 255; // OK
int valJoyestickPS4XMin = 0; // OK
int valJoyestickPS4XMax = 255; // OK
String textAngleTangage;

void loop() {
  // put your main code here, to run repeatedly:
  
  Usb.Task();
  
  if (PS4.connected()) {
  
    // ACCELERATEUR
    valeurAccelerateurs = PS4.getAnalogButton(R2) ;
    
    // ANGLE LACET  
    // R1 & L1 -> angle lacet
    if(PS4.getButtonPress(R1) && PS4.getButtonPress(L1)) {
      angleLacet = 0;
    }
    // L1 -> angle lacet
    else if (PS4.getButtonPress(L1)) {
      angleLacet = - angleLacetMax;
    }
    // R1 -> angle lacet
    else if (PS4.getButtonPress(R1)) {
      angleLacet = angleLacetMax;
    }

    else // angle 0 lacet
    {
      angleLacet = 0;
    }
    servoEmpenage = angleLacet;
    // RECUPERATION DE LA ROTATION DES AILETTES 
    // ATTENTION -> valJoyestickPS4XMin et valJoyestickPS4XMax a déterminer pour X et Y !!!
    angleTangage = map(PS4.getAnalogHat(LeftHatY),valJoyestickPS4YMin,valJoyestickPS4YMax,angleAiletteMin,angleAiletteMax);
    angleRoulis = map(PS4.getAnalogHat(LeftHatX),valJoyestickPS4XMin,valJoyestickPS4XMax,angleAiletteMin,angleAiletteMax);
    servoAileDroite = angleTangage + angleRoulis;
    servoAileGauche = angleTangage - angleRoulis;

    // mettre les servo au max ou au min si la valeur dépasse
    if(servoAileDroite > angleAiletteMax)
    {
      servoAileDroite = angleAiletteMax;
    }
    if(servoAileGauche > angleAiletteMax)
    {
      servoAileGauche = angleAiletteMax;
    }
    if(servoAileDroite < angleAiletteMin)
    {
      servoAileDroite = angleAiletteMin;
    }
    if(servoAileGauche < angleAiletteMin)
    {
      servoAileGauche = angleAiletteMin;
    }

  
    // ENVOYER LE MESSAGE !!!!!!

    //message = servoAileDroite+18 + (servoAileGauche+18)*100 + (servoEmpenage+18)*10000 + valeurAccelerateurs*1000000;
   //Serial.print(" valeurAccelerateurs : ");
   //Serial.println(valeurAccelerateurs);
   //Serial.print(" angleTangage : ");
   //Serial.println(angleTangage);
   //Serial.print(" angleRoulis : ");
   //Serial.println(angleRoulis);
   //Serial.print(" servoAileDroite : ");
   //Serial.println(servoAileDroite);
   //Serial.print(" servoAileGauche : ");
   //Serial.println(servoAileGauche);
   //Serial.print(" servoEmpenage : ");
   //Serial.println(servoEmpenage);
  }



  // CODE D'ENVOIE DES DONNEES
  Serial.println(PS4.getAnalogButton(R2));
  textAngleTangage = (String) PS4.getAnalogButton(R2) ;
  Serial.println(textAngleTangage);
  if (textAngleTangage.length() > 4)
  {
      textAngleTangage = textAngleTangage[1] + textAngleTangage[2] + textAngleTangage[3] + textAngleTangage[4] ;
  }
  else if (textAngleTangage.length() < 4)
  {
      textAngleTangage = "0000";
  }
  
  if textAngleTangage.length() == 4 
  {

    
    byte message[TAILLE];
    String mot("");
    mot = textAngleTangage;
    
  
    for (int i(0) ; i<mot.length() ; i++)
    {
        message[i] = (byte) mot[i];
    }
  
    int len = mot.length();
    // Lit un message de maximum 32 caractères depuis le port série
    //int len = Serial.readBytesUntil('\n', (char*) message, TAILLE);
    Serial.println(len);
    if (!len) {
      return; // Pas de message
    }
    message[len] = '\0'; // Ferme la chaine de caractères
    
    Mirf.send(message); // On envoi le message
    while(Mirf.isSending()); // On attend la fin de l

    
   }
  

}

